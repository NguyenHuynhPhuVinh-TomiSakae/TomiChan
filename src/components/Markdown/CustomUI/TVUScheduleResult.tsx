/* eslint-disable @typescript-eslint/no-explicit-any */
import React from "react";
import {
  IconCalendarTime,
  IconAlertTriangle,
  IconSchool,
  IconUser,
  IconBuilding,
  IconClock,
} from "@tabler/icons-react";

interface TVUScheduleResultProps {
  children: React.ReactNode;
}

export const TVUScheduleResult: React.FC<TVUScheduleResultProps> = ({
  children,
}) => {
  // Chuy·ªÉn ƒë·ªïi children th√†nh string m·ªôt c√°ch an to√†n
  const rawContent = React.Children.toArray(children)
    .map((child) => {
      if (typeof child === "string") return child;
      if (child && typeof child === "object" && "props" in child) {
        return (child as any).props.children;
      }
      return "";
    })
    .join("");

  // T√°ch th√¥ng tin t·ª´ n·ªôi dung
  const date = rawContent.match(/DATE:\s*(.*?)(?=\n|$)/)?.[1]?.trim();
  const action = rawContent.match(/ACTION:\s*(.*?)(?=\n|$)/)?.[1]?.trim();

  // X√°c ƒë·ªãnh ti√™u ƒë·ªÅ d·ª±a tr√™n action
  let title = "";
  switch (action) {
    case "xem_hom_nay":
      title = "Th·ªùi Kh√≥a Bi·ªÉu H√¥m Nay";
      break;
    case "xem_ngay_mai":
      title = "Th·ªùi Kh√≥a Bi·ªÉu Ng√†y Mai";
      break;
    case "xem_theo_ngay":
      title = "Th·ªùi Kh√≥a Bi·ªÉu Theo Ng√†y";
      break;
    case "xem_lich_thi":
      title = "L·ªãch Thi";
      break;
    default:
      title = "Th·ªùi Kh√≥a Bi·ªÉu";
  }

  // H√†m x√°c ƒë·ªãnh bu·ªïi h·ªçc d·ª±a tr√™n ti·∫øt
  const getBuoi = (tiet: string) => {
    if (!tiet) return "";
    // T√°ch s·ªë ti·∫øt, v√≠ d·ª• "1-3" s·∫Ω l·∫•y ti·∫øt ƒë·∫ßu ti√™n l√† 1
    const tietDau = parseInt(tiet.split("-")[0]);

    if (tietDau >= 1 && tietDau <= 5) return "Bu·ªïi s√°ng";
    if (tietDau >= 6 && tietDau <= 10) return "Bu·ªïi chi·ªÅu";
    if (tietDau >= 11 && tietDau <= 15) return "Bu·ªïi t·ªëi";
    return "";
  };

  // H√†m s·ª≠a v√† ƒë·ªãnh d·∫°ng l·∫°i th√¥ng tin ti·∫øt h·ªçc
  const formatTiet = (tietInfo: string): string => {
    if (!tietInfo) return "";

    const parts = tietInfo.split("-");
    if (parts.length !== 2) return tietInfo;

    const start = parseInt(parts[0]);
    const count = parseInt(parts[1]);

    // N·∫øu ph·∫ßn th·ª© hai l√† s·ªë ti·∫øt (kh√¥ng ph·∫£i ti·∫øt k·∫øt th√∫c)
    if (count < start) {
      const end = start + count - 1; // T√≠nh ti·∫øt k·∫øt th√∫c
      return `${start}-${end}`;
    }

    return tietInfo; // Tr·∫£ v·ªÅ nguy√™n m·∫´u n·∫øu ƒë√£ ƒë√∫ng ƒë·ªãnh d·∫°ng
  };

  // Ki·ªÉm tra xem n·ªôi dung c√≥ ph·∫£i l√† th√¥ng b√°o kh√¥ng c√≥ l·ªãch kh√¥ng
  const noSchedule = rawContent.includes("Kh√¥ng c√≥ l·ªãch h·ªçc v√†o ng√†y");

  // X·ª≠ l√Ω ho√†n to√†n th·ªß c√¥ng d·ª±a tr√™n c·∫•u tr√∫c c·ª• th·ªÉ c·ªßa d·ªØ li·ªáu
  // T√¨m v·ªã tr√≠ c·ªßa ACTION v√† chia chu·ªói th√†nh hai ph·∫ßn
  const actionIndex = rawContent.indexOf(`ACTION: ${action}`);
  const contentAfterAction = rawContent
    .substring(actionIndex + `ACTION: ${action}`.length)
    .trim();

  // Kh·ªüi t·∫°o danh s√°ch c√°c m√¥n h·ªçc l√† m·∫£ng r·ªóng
  const subjects: any[] = [];

  // N·∫øu kh√¥ng ph·∫£i th√¥ng b√°o kh√¥ng c√≥ l·ªãch, ti·∫øn h√†nh ph√¢n t√≠ch n·ªôi dung
  if (!noSchedule) {
    // Chia nh·ªè chu·ªói th√†nh c√°c d√≤ng
    const lines = contentAfterAction.split("\n");

    let currentSubject: any = null;

    // Duy·ªát qua t·ª´ng d√≤ng ƒë·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng m√¥n h·ªçc
    for (const line of lines) {
      const trimmedLine = line.trim();

      if (trimmedLine.startsWith("üìö")) {
        // N·∫øu ƒë√£ c√≥ m√¥n h·ªçc hi·ªán t·∫°i, th√™m v√†o danh s√°ch
        if (currentSubject) {
          subjects.push(currentSubject);
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng m√¥n h·ªçc m·ªõi
        currentSubject = {
          tenMon: trimmedLine.substring(2).trim(),
          giangVien: "",
          phong: "",
          tiet: "",
        };
      } else if (trimmedLine.startsWith("üë®‚Äçüè´ GV:") && currentSubject) {
        currentSubject.giangVien = trimmedLine
          .substring("üë®‚Äçüè´ GV:".length)
          .trim();
      } else if (trimmedLine.startsWith("üè¢ Ph√≤ng:") && currentSubject) {
        currentSubject.phong = trimmedLine.substring("üè¢ Ph√≤ng:".length).trim();
      } else if (trimmedLine.startsWith("‚è∞ Ti·∫øt") && currentSubject) {
        currentSubject.tiet = trimmedLine.substring("‚è∞ Ti·∫øt".length).trim();
      }
    }

    // Th√™m m√¥n h·ªçc cu·ªëi c√πng n·∫øu c√≥
    if (currentSubject) {
      subjects.push(currentSubject);
    }
  }

  return (
    <div className="my-4 p-4 rounded-lg border-2 border-blue-500/30 bg-white dark:bg-gray-800 shadow-md">
      {/* Header */}
      <div className="flex items-center gap-3 mb-4">
        <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
          <IconCalendarTime
            className="text-blue-500 dark:text-blue-400"
            size={24}
          />
        </div>
        <div>
          <h3 className="font-semibold text-lg text-blue-600 dark:text-blue-400">
            {title}
          </h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            {date
              ? new Date(date).toLocaleDateString("vi-VN", {
                  weekday: "long",
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })
              : ""}
          </p>
        </div>
      </div>

      {/* No schedule message */}
      {noSchedule && (
        <div className="flex items-center gap-2 p-4 rounded-lg bg-gray-100 dark:bg-gray-700">
          <IconAlertTriangle size={20} className="text-orange-500" />
          <p className="text-gray-700 dark:text-gray-300">
            Kh√¥ng c√≥ l·ªãch h·ªçc v√†o ng√†y {date}.
          </p>
        </div>
      )}

      {/* Schedule items */}
      {!noSchedule && subjects.length > 0 && (
        <div className="mt-4 space-y-4">
          {subjects.map((subject, index) => {
            const formattedTiet = formatTiet(subject.tiet);
            const buoi = getBuoi(formattedTiet.split("-")[0]); // L·∫•y bu·ªïi d·ª±a tr√™n ti·∫øt b·∫Øt ƒë·∫ßu

            return (
              <div
                key={index}
                className="p-4 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700"
              >
                <div className="flex items-start justify-between">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <IconSchool size={18} className="text-blue-500" />
                      <span className="font-medium text-black dark:text-white">
                        {subject.tenMon}
                      </span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                      <IconUser size={16} />
                      <span>{subject.giangVien}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                      <IconBuilding size={16} />
                      <span>{subject.phong}</span>
                    </div>
                  </div>
                  <div className="flex flex-col gap-2 items-end">
                    <div className="flex items-center gap-1 px-3 py-1 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400">
                      <IconClock size={14} />
                      <span className="text-sm font-medium">
                        Ti·∫øt {formattedTiet}
                      </span>
                    </div>
                    {buoi && (
                      <div className="text-xs text-gray-500 dark:text-gray-400 italic">
                        {buoi}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};
