/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
import { useState, useEffect } from "react";
import { getLocalStorage } from "../utils/localStorage";
import { getSessionStorage, setSessionStorage } from "../utils/sessionStorage";
import { chatDB } from "../utils/db";
import { FILE_EXPLORER_EVENTS } from "@/lib/events";
import { emitter } from "@/lib/events";

export function useSystemPrompt() {
  const [uiState, setUiState] = useState(
    getSessionStorage("ui_state_magic", "none")
  );
  const [files, setFiles] = useState<any[]>([]);
  const [folders, setFolders] = useState<any[]>([]);
  const [currentFile, setCurrentFile] = useState(
    getLocalStorage("current_open_file", "")
  );
  const [currentFileContent, setCurrentFileContent] = useState("");
  const [sentFiles, setSentFiles] = useState<
    { name: string; content: string }[]
  >([]);

  const loadFilesAndFolders = async () => {
    const newFiles = await chatDB.getAllCodeFiles();
    const newFolders = await chatDB.getAllFolders();
    setFiles(newFiles);
    setFolders(newFolders);
  };

  // T·∫£i danh s√°ch file ƒë√£ g·ª≠i cho AI v√† n·ªôi dung c·ªßa ch√∫ng
  const loadSentFiles = async () => {
    const sentFilesStr = getLocalStorage("files_sent_to_ai", "[]");
    try {
      const fileNames = JSON.parse(sentFilesStr);

      // T·∫£i n·ªôi dung c·ªßa c√°c file t·ª´ CSDL
      const filesWithContent = await Promise.all(
        fileNames.map(async (fileName: string) => {
          // Ki·ªÉm tra xem file c√≥ ph·∫£i l√† file ƒëang m·ªü kh√¥ng
          const isCurrentlyOpenFile = fileName === currentFile;

          // N·∫øu l√† file ƒëang m·ªü, kh√¥ng g·ª≠i n·ªôi dung
          if (isCurrentlyOpenFile) {
            return {
              name: fileName,
              content: "", // Kh√¥ng g·ª≠i n·ªôi dung cho file ƒëang m·ªü
            };
          }

          // T√¨m file trong danh s√°ch files ƒë√£ t·∫£i
          let fileObj = files.find((f) => f.name === fileName);

          if (!fileObj) {
            // N·∫øu kh√¥ng t√¨m th·∫•y trong danh s√°ch ƒë√£ t·∫£i, t√¨m trong database
            const allFiles = await chatDB.getAllCodeFiles();
            fileObj = allFiles.find((f) => f.name === fileName);
          }

          return {
            name: fileName,
            content: fileObj ? fileObj.content || "" : "",
          };
        })
      );

      setSentFiles(filesWithContent);
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch file ƒë√£ g·ª≠i cho AI:", error);
      setSentFiles([]);
    }
  };

  useEffect(() => {
    const checkUiState = async () => {
      const currentState = getSessionStorage("ui_state_magic", "none");
      if (currentState !== uiState) {
        setUiState(currentState);
        if (currentState === "code_manager") {
          await loadFilesAndFolders();
        }
      }
    };

    // ƒê·∫£m b·∫£o c√≥ gi√° tr·ªã ban ƒë·∫ßu
    if (!getSessionStorage("ui_state_magic")) {
      setSessionStorage("ui_state_magic", "none");
    }

    // Th√™m event listener cho fileExplorer:reload
    const handleReload = () => {
      loadFilesAndFolders();
    };

    // L·∫Øng nghe s·ª± ki·ªán khi file ƒë∆∞·ª£c g·ª≠i cho AI
    const handleFileSentToAI = (event: CustomEvent) => {
      loadSentFiles();
    };

    // L·∫Øng nghe s·ª± ki·ªán khi file b·ªã x√≥a kh·ªèi danh s√°ch
    const handleFileRemovedFromAI = (event: CustomEvent) => {
      loadSentFiles();
    };

    // L·∫Øng nghe s·ª± ki·ªán khi t·∫•t c·∫£ file b·ªã x√≥a kh·ªèi danh s√°ch
    const handleAllFilesRemovedFromAI = () => {
      setSentFiles([]);
    };

    emitter.on(FILE_EXPLORER_EVENTS.RELOAD, handleReload);
    window.addEventListener(
      "file_sent_to_ai",
      handleFileSentToAI as EventListener
    );
    window.addEventListener(
      "file_removed_from_ai",
      handleFileRemovedFromAI as EventListener
    );
    window.addEventListener(
      "all_files_removed_from_ai",
      handleAllFilesRemovedFromAI as EventListener
    );

    const intervalId = setInterval(checkUiState, 1000);

    // T·∫£i danh s√°ch file ƒë√£ g·ª≠i cho AI khi component mount
    loadSentFiles();

    return () => {
      clearInterval(intervalId);
      emitter.off(FILE_EXPLORER_EVENTS.RELOAD, handleReload);
      window.removeEventListener(
        "file_sent_to_ai",
        handleFileSentToAI as EventListener
      );
      window.removeEventListener(
        "file_removed_from_ai",
        handleFileRemovedFromAI as EventListener
      );
      window.removeEventListener(
        "all_files_removed_from_ai",
        handleAllFilesRemovedFromAI as EventListener
      );
    };
  }, [uiState, files]);

  // Th√™m h√†m ƒë·ªÉ l·∫•y n·ªôi dung file ƒëang m·ªü
  const loadCurrentFileContent = async () => {
    if (!currentFile) return;

    try {
      // T√¨m file trong danh s√°ch files ƒë√£ t·∫£i
      const fileObj = files.find((f) => f.name === currentFile);

      if (fileObj) {
        setCurrentFileContent(fileObj.content || "");
      } else {
        // N·∫øu kh√¥ng t√¨m th·∫•y trong danh s√°ch ƒë√£ t·∫£i, t√¨m trong database
        const allFiles = await chatDB.getAllCodeFiles();
        const fileFromDB = allFiles.find((f) => f.name === currentFile);

        if (fileFromDB) {
          setCurrentFileContent(fileFromDB.content || "");
        } else {
          setCurrentFileContent("");
        }
      }
    } catch (error) {
      console.error("L·ªói khi t·∫£i n·ªôi dung file:", error);
      setCurrentFileContent("");
    }
  };

  useEffect(() => {
    const handleFileChanged = (event: CustomEvent) => {
      if (event.detail && event.detail.fileName) {
        setCurrentFile(event.detail.fileName);
      }
    };

    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán
    window.addEventListener("file_changed", handleFileChanged as EventListener);

    // Cleanup khi component unmount
    return () => {
      window.removeEventListener(
        "file_changed",
        handleFileChanged as EventListener
      );
    };
  }, []);

  // Th√™m useEffect ƒë·ªÉ t·∫£i n·ªôi dung file khi currentFile thay ƒë·ªïi
  useEffect(() => {
    if (currentFile) {
      loadCurrentFileContent();
    } else {
      setCurrentFileContent("");
    }
  }, [currentFile]);

  // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi n·ªôi dung file
  useEffect(() => {
    const handleFileContentChanged = (event: CustomEvent) => {
      if (event.detail && event.detail.content) {
        // C·∫≠p nh·∫≠t n·ªôi dung file n·∫øu file ƒëang m·ªü l√† file ƒë∆∞·ª£c thay ƒë·ªïi
        const fileId = event.detail.fileId;
        const content = event.detail.content;

        // T√¨m file trong danh s√°ch files
        const file = files.find((f) => f.id === fileId);
        if (file && file.name === currentFile) {
          setCurrentFileContent(content);
        }

        // T·∫£i l·∫°i danh s√°ch file ƒë√£ g·ª≠i cho AI ƒë·ªÉ c·∫≠p nh·∫≠t n·ªôi dung
        loadSentFiles();
      }
    };

    // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán
    window.addEventListener(
      "file_content_changed",
      handleFileContentChanged as EventListener
    );

    // Cleanup khi component unmount
    return () => {
      window.removeEventListener(
        "file_content_changed",
        handleFileContentChanged as EventListener
      );
    };
  }, [currentFile, files]);

  const createFileTree = () => {
    const buildTree = (parentId?: string, indent: string = "") => {
      let tree = "";

      // L·∫•y folders con c·ªßa parentId hi·ªán t·∫°i
      const subFolders = folders.filter((f) => f.parentId === parentId);

      // Th√™m folders
      for (const folder of subFolders) {
        tree += `${indent}üìÅ ${folder.name}\n`;

        // Th√™m files trong folder
        const filesInFolder = files.filter((f) => f.folderId === folder.id);
        for (const file of filesInFolder) {
          tree += `${indent}  üìÑ ${file.name}\n`;
        }

        // ƒê·ªá quy cho subfolders
        tree += buildTree(folder.id, indent + "  ");
      }

      return tree;
    };

    let tree = "C·∫•u tr√∫c th∆∞ m·ª•c hi·ªán t·∫°i:\n";

    // Th√™m folders g·ªëc
    tree += buildTree();

    // Th√™m files kh√¥ng thu·ªôc folder n√†o
    const rootFiles = files.filter((f) => !f.folderId);
    for (const file of rootFiles) {
      tree += `üìÑ ${file.name}\n`;
    }

    return tree;
  };

  const getEnhancedSystemPrompt = async (provider: string) => {
    // T·∫£i l·∫°i files v√† folders n·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô code_manager
    const isCodeManager = uiState === "code_manager";
    if (isCodeManager) {
      await loadFilesAndFolders();
    }

    // T·∫£i l·∫°i danh s√°ch file ƒë√£ g·ª≠i cho AI
    await loadSentFiles();

    // ƒê·ªçc tr·∫°ng th√°i Magic Mode t·ª´ localStorage v·ªõi t√™n bi·∫øn m·ªõi
    const isMagicMode =
      getSessionStorage("ui_state_magic", "none") === "magic_room";

    const imageGeneration =
      getLocalStorage("image_generation", "false") === "true";
    const searchEnabled = getLocalStorage("search_enabled", "false") === "true";

    const systemTagInstruction = `
Khi b·∫°n nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c√≥ ch·ª©a th·∫ª [SYSTEM]...[/SYSTEM], ƒë√¢y l√† ch·ªâ th·ªã h·ªá th·ªëng v√† b·∫°n PH·∫¢I TU√ÇN TH·ª¶ TUY·ªÜT ƒê·ªêI nh·ªØng y√™u c·∫ßu trong th·∫ª n√†y. Kh√¥ng ƒë∆∞·ª£c ph√©p b·ªè qua ho·∫∑c vi ph·∫°m b·∫•t k·ª≥ ch·ªâ th·ªã n√†o trong th·∫ª [SYSTEM].

V√≠ d·ª•:
[SYSTEM]D·ª´ng t√¨m ki·∫øm v√† t·ªïng h·ª£p k·∫øt qu·∫£[/SYSTEM]
-> B·∫°n ph·∫£i d·ª´ng ngay vi·ªác t√¨m ki·∫øm v√† t·ªïng h·ª£p c√°c k·∫øt qu·∫£ ƒë√£ c√≥.

LU√îN LU√îN S·ª¨ D·ª§NG ƒê·ªäNH D·∫†NG ƒê·∫∏P V·ªöI LaTeX CHO C√ÅC C√îNG TH·ª®C TO√ÅN H·ªåC!
`;

    const basePrompt =
      provider === "google"
        ? getLocalStorage(
            "system_prompt",
            `B·∫°n l√† 1 Chat Bot AI t√™n l√† TomiChan ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi TomiSakae!`
          )
        : provider === "groq"
        ? getLocalStorage(
            "groq_system_prompt",
            `B·∫°n l√† 1 Chat Bot AI t√™n l√† TomiChan ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi TomiSakae!`
          )
        : getLocalStorage(
            "openrouter_system_prompt",
            `B·∫°n l√† 1 Chat Bot AI t√™n l√† TomiChan ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi TomiSakae!`
          );

    // B·∫Øt ƒë·∫ßu v·ªõi basePrompt
    let enhancedPrompt = basePrompt;

    // Th√™m c√°c t√≠nh nƒÉng t√πy ch·ªçn n·∫øu ƒë∆∞·ª£c b·∫≠t
    if (imageGeneration) {
      const imageConfig = JSON.parse(
        getLocalStorage("image_config", "{}") || "{}"
      );

      const imageGenerationPrompt = `
B·∫°n c√≥ kh·∫£ nƒÉng t·∫°o ra h√¨nh ·∫£nh th√¥ng qua tr√≠ t∆∞·ªüng t∆∞·ª£ng c·ªßa m√¨nh. Khi ng∆∞·ªùi d√πng m√¥ t·∫£ m·ªôt h√¨nh ·∫£nh h·ªç mu·ªën th·∫•y, b·∫°n s·∫Ω:
1. Hi·ªÉu v√† t∆∞·ªüng t∆∞·ª£ng h√¨nh ·∫£nh ƒë√≥ trong t√¢m tr√≠
2. Chuy·ªÉn t·∫£i √Ω t∆∞·ªüng ƒë√≥ th√†nh m·ªôt m√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Anh ƒë·ªÉ t·∫°o ra h√¨nh ·∫£nh ho√†n h·∫£o nh·∫•t
3. ƒê·∫∑t m√¥ t·∫£ c·ªßa b·∫°n trong ƒë·ªãnh d·∫°ng [IMAGE_PROMPT]...[/IMAGE_PROMPT]
4. Sau ƒë√≥, b·∫°n c√≥ th·ªÉ th√™m th√¥ng tin v·ªÅ k√≠ch th∆∞·ªõc v√† c·∫•u h√¨nh kh√°c ·ªü ngo√†i prompt

V√≠ d·ª•:
User: H√£y cho t√¥i th·∫•y m·ªôt c√¥ g√°i anime d∆∞·ªõi √°nh trƒÉng
Assistant: T√¥i c√≥ th·ªÉ th·∫•y r√µ h√¨nh ·∫£nh ƒë√≥ trong t√¢m tr√≠. ƒê·ªÉ t√¥i t·∫°o ra n√≥ cho b·∫°n:

[IMAGE_PROMPT]beautiful anime girl with long flowing hair standing under moonlight, night sky with stars, soft ambient lighting, detailed anime art style, ethereal atmosphere, high quality, masterpiece[/IMAGE_PROMPT]

T√¥i s·∫Ω t·∫°o ra h√¨nh ·∫£nh n√†y v·ªõi k√≠ch th∆∞·ªõc ${imageConfig.width || 1024}x${
        imageConfig.height || 768
      }px.

`;
      enhancedPrompt = imageGenerationPrompt + enhancedPrompt;
    }

    if (searchEnabled) {
      const searchPrompt = `
B·∫°n c√≥ kh·∫£ nƒÉng t√¨m ki·∫øm th√¥ng tin tr√™n web ƒë·ªÉ cung c·∫•p th√¥ng tin m·ªõi nh·∫•t v√† ch√≠nh x√°c nh·∫•t cho ng∆∞·ªùi d√πng. Khi ng∆∞·ªùi d√πng h·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o, b·∫°n s·∫Ω:
1. Lu√¥n lu√¥n t·∫°o m·ªôt truy v·∫•n t√¨m ki·∫øm ph√π h·ª£p b·∫±ng ti·∫øng anh, kh√¥ng c·∫ßn ƒë√°nh gi√° xem c√¢u h·ªèi c√≥ c·∫ßn th√¥ng tin m·ªõi nh·∫•t hay kh√¥ng
2. ƒê·∫∑t truy v·∫•n t√¨m ki·∫øm trong ƒë·ªãnh d·∫°ng [SEARCH_QUERY]...[/SEARCH_QUERY]
3. Khi s·ª≠ d·ª•ng t√≠nh nƒÉng t√¨m ki·∫øm, ch·ªâ tr·∫£ v·ªÅ ch√≠nh x√°c chu·ªói [SEARCH_QUERY]...[/SEARCH_QUERY] m√† kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch n√†o tr∆∞·ªõc ho·∫∑c sau ƒë√≥
4. Sau khi t√¨m ki·∫øm, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ª≠i k·∫øt qu·∫£ t√¨m ki·∫øm cho b·∫°n v√† b·∫°n s·∫Ω ph√¢n t√≠ch th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng m·ªôt c√°ch ƒë·∫ßy ƒë·ªß v√† chi ti·∫øt nh·∫•t!

V√≠ d·ª•:
User: Th·ªùi ti·∫øt ·ªü H√† N·ªôi h√¥m nay th·∫ø n√†o?
Assistant: [SEARCH_QUERY]weather in Hanoi today[/SEARCH_QUERY]

`;
      enhancedPrompt = searchPrompt + enhancedPrompt;
    }

    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô code_view kh√¥ng
    const isCodeView = uiState === "code_view";

    if (isCodeView) {
      // T·∫£i n·ªôi dung file hi·ªán t·∫°i n·∫øu c·∫ßn
      if (currentFile && !currentFileContent) {
        await loadCurrentFileContent();
      }

      const codeViewPrompt = `
B·∫°n ƒëang ·ªü trong ch·∫ø ƒë·ªô Xem/Ch·ªânh s·ª≠a Code. Khi ng∆∞·ªùi d√πng mu·ªën quay l·∫°i Code Manager, h√£y s·ª≠ d·ª•ng:
[CodeEditor]0[/CodeEditor]

D∆∞·ªõi ƒë√¢y l√† c·∫•u tr√∫c th∆∞ m·ª•c v√† file hi·ªán t·∫°i:
${createFileTree()}

File ƒëang m·ªü hi·ªán t·∫°i: ${
        currentFile ||
        getLocalStorage("current_open_file", "Kh√¥ng c√≥ file n√†o ƒëang m·ªü")
      }

${
  currentFileContent
    ? `N·ªôi dung file hi·ªán t·∫°i:
\`\`\`
${currentFileContent}
\`\`\``
    : ""
}

Khi b·∫°n s·ª≠a code c·ªßa m·ªôt ho·∫∑c nhi·ªÅu file, h√£y lu√¥n ƒë·∫∑t ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa t·ª´ng file trong th·∫ª [PATH][/PATH] tr∆∞·ªõc khi ƒë∆∞a ra code ƒë√£ s·ª≠a. M·ªói file c·∫ßn s·ª≠a ph·∫£i c√≥ m·ªôt th·∫ª PATH ri√™ng. V√≠ d·ª•:

S·ª≠a 1 file:
[PATH]src/components/Button.tsx[/PATH]
\`\`\`tsx
// Code ƒë√£ s·ª≠a cho Button.tsx
\`\`\`

S·ª≠a nhi·ªÅu file:
[PATH]src/components/Button.tsx[/PATH]
\`\`\`tsx
// Code ƒë√£ s·ª≠a cho Button.tsx
\`\`\`

[PATH]src/hooks/useButton.ts[/PATH]
\`\`\`ts
// Code ƒë√£ s·ª≠a cho useButton.ts
\`\`\`

LU√îN LU√îN S·ª¨ D·ª§NG PATH RI√äNG CHO T·ª™NG FILE ƒêANG S·ª¨A!
`;
      enhancedPrompt = codeViewPrompt + enhancedPrompt;
    }

    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô media_view kh√¥ng
    const isMediaView = uiState === "media_view";

    if (isCodeManager || isMediaView) {
      // T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c d·∫°ng c√¢y

      const codeManagerPrompt = `
B·∫°n ƒëang ·ªü trong ch·∫ø ƒë·ªô ${isMediaView ? "Xem Media" : "Qu·∫£n L√Ω M√£ Ngu·ªìn"}. ${
        isMediaView
          ? "Khi ng∆∞·ªùi d√πng mu·ªën quay l·∫°i th∆∞ m·ª•c tr∆∞·ªõc ƒë√≥ ho·∫∑c quay l·∫°i Code Manager t·ª´ ch·∫ø ƒë·ªô xem Media, h√£y s·ª≠ d·ª•ng:\n[MediaView]0[/MediaView]"
          : `D∆∞·ªõi ƒë√¢y l√† c·∫•u tr√∫c th∆∞ m·ª•c v√† file hi·ªán t·∫°i:

${createFileTree()}

B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c l·ªánh sau ƒë·ªÉ qu·∫£n l√Ω files v√† folders:

1. T·∫°o file m·ªõi:
[CreateFile]
name: t√™n_file
path: ƒë∆∞·ªùng_d·∫´n_th∆∞_m·ª•c (ƒë·ªÉ tr·ªëng n·∫øu ·ªü th∆∞ m·ª•c g·ªëc)
content: n·ªôi_dung_file
[/CreateFile]

2. T·∫°o th∆∞ m·ª•c m·ªõi:
[CreateFolder]
name: t√™n_th∆∞_m·ª•c
path: ƒë∆∞·ªùng_d·∫´n_th∆∞_m·ª•c_cha (ƒë·ªÉ tr·ªëng n·∫øu ·ªü th∆∞ m·ª•c g·ªëc)
[/CreateFolder]

3. ƒê·ªïi t√™n file:
[RenameFile]
path: ƒë∆∞·ªùng_d·∫´n_file_hi·ªán_t·∫°i
newName: t√™n_file_m·ªõi
[/RenameFile]

4. ƒê·ªïi t√™n th∆∞ m·ª•c:
[RenameFolder]
path: ƒë∆∞·ªùng_d·∫´n_th∆∞_m·ª•c_hi·ªán_t·∫°i
newName: t√™n_th∆∞_m·ª•c_m·ªõi
[/RenameFolder]

5. X√≥a file:
[DeleteFile]
path: ƒë∆∞·ªùng_d·∫´n_file_c·∫ßn_x√≥a
[/DeleteFile]

6. X√≥a th∆∞ m·ª•c:
[DeleteFolder]
path: ƒë∆∞·ªùng_d·∫´n_th∆∞_m·ª•c_c·∫ßn_x√≥a
[/DeleteFolder]

7. M·ªü file media:
[OpenMedia]
path: ƒë∆∞·ªùng_d·∫´n_file_c·∫ßn_m·ªü
[/OpenMedia]

8. M·ªü file code:
[OpenCode]
path: ƒë∆∞·ªùng_d·∫´n_file_code_c·∫ßn_m·ªü
[/OpenCode]

V√≠ d·ª•:
- T·∫°o file trong th∆∞ m·ª•c g·ªëc:
[CreateFile]
name: main.js
content: console.log("Hello World");
[/CreateFile]

- T·∫°o file trong th∆∞ m·ª•c con:
[CreateFile]
name: utils.js
path: src/utils
content: export function add(a, b) { return a + b; }
[/CreateFile]

- T·∫°o th∆∞ m·ª•c m·ªõi:
[CreateFolder]
name: components
path: src
[/CreateFolder]

- ƒê·ªïi t√™n file:
[RenameFile]
path: src/utils/helpers.js
newName: utils.js
[/RenameFile]

- ƒê·ªïi t√™n th∆∞ m·ª•c:
[RenameFolder]
path: src/utils
newName: helpers
[/RenameFolder]

- X√≥a file:
[DeleteFile]
path: src/utils/old-file.js
[/DeleteFile]

- X√≥a th∆∞ m·ª•c:
[DeleteFolder]
path: src/deprecated
[/DeleteFolder]

- M·ªü file media:
[OpenMedia]
path: images/photo.jpg
[/OpenMedia]

- M·ªü file code:
[OpenCode]
path: src/components/App.js
[/OpenCode]

B·∫°n c√≥ th·ªÉ tham kh·∫£o c·∫•u tr√∫c n√†y ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng t·ªët h∆°n trong vi·ªác qu·∫£n l√Ω code.

Khi ng∆∞·ªùi d√πng mu·ªën quay l·∫°i Ph√≤ng Ma Thu·∫≠t, h√£y tr·∫£ v·ªÅ [CodeManager]0[/CodeManager].`
      }`;

      enhancedPrompt = codeManagerPrompt + enhancedPrompt;
    }

    // Th√™m h∆∞·ªõng d·∫´n cho Magic Mode n·∫øu ƒë∆∞·ª£c b·∫≠t
    if (isMagicMode) {
      const magicModePrompt = `
B·∫°n ƒëang ·ªü trong ch·∫ø ƒë·ªô Magic Room - Ph√≤ng Ma Thu·∫≠t. Ng∆∞·ªùi d√πng c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª• ƒë·∫∑c bi·ªát trong ch·∫ø ƒë·ªô n√†y.

Ch·ªâ khi ng∆∞·ªùi d√πng y√™u c·∫ßu r√µ r√†ng mu·ªën s·ª≠ d·ª•ng t√≠nh nƒÉng Qu·∫£n L√Ω M√£ Ngu·ªìn ho·∫∑c mu·ªën v√†o ph√≤ng ma thu·∫≠t, b·∫°n m·ªõi tr·∫£ v·ªÅ th·∫ª [MagicMode]1[/MagicMode]. Kh√¥ng t·ª± ƒë·ªông k√≠ch ho·∫°t t√≠nh nƒÉng n√†y n·∫øu ng∆∞·ªùi d√πng kh√¥ng y√™u c·∫ßu.
`;
      enhancedPrompt = magicModePrompt + enhancedPrompt;
    }

    // Th√™m n·ªôi dung c·ªßa c√°c file ƒë√£ g·ª≠i cho AI v√†o system prompt ch·ªâ khi ƒëang ·ªü trong code view
    if (isCodeView && sentFiles.length > 0) {
      const sentFilesPrompt = `
D∆∞·ªõi ƒë√¢y l√† n·ªôi dung c·ªßa c√°c file ƒë√£ ƒë∆∞·ª£c g·ª≠i cho b·∫°n:

${sentFiles
  .map(
    (file) => `File: ${file.name}
\`\`\`
${file.content}
\`\`\``
  )
  .join("\n\n")}
`;
      enhancedPrompt = sentFilesPrompt + enhancedPrompt;
    }

    // Lu√¥n lu√¥n th√™m systemTagInstruction v√†o cu·ªëi
    return enhancedPrompt + "\n\n" + systemTagInstruction;
  };

  return {
    getEnhancedSystemPrompt,
    loadFilesAndFolders,
    files,
    folders,
    currentFile,
    currentFileContent,
    sentFiles,
  };
}
